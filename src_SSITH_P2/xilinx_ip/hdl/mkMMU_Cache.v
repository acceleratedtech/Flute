//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Wed Feb  5 20:43:28 EST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    64
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// req_parbase                    I    64 reg
// req_parmask                    I    64 reg
// req_mrbm                       I    64 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   req_parbase,
		   req_parmask,
		   req_mrbm,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  [63 : 0] req_parbase;
  input  [63 : 0] req_parmask;
  input  [63 : 0] req_mrbm;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [10 : 0] crg_sb_to_load_delay$port0__write_1,
		crg_sb_to_load_delay$port2__read;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire crg_sb_to_load_delay$EN_port1__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register crg_sb_to_load_delay
  reg [10 : 0] crg_sb_to_load_delay;
  wire [10 : 0] crg_sb_to_load_delay$D_IN;
  wire crg_sb_to_load_delay$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [5 : 0] rg_cset_in_cache;
  wire [5 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [63 : 0] rg_lrsc_pa;
  wire [63 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mrbm
  reg [63 : 0] rg_mrbm;
  wire [63 : 0] rg_mrbm$D_IN;
  wire rg_mrbm$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_parbase
  reg [63 : 0] rg_parbase;
  wire [63 : 0] rg_parbase$D_IN;
  wire rg_parbase$EN;

  // register rg_parmask
  reg [63 : 0] rg_parmask;
  wire [63 : 0] rg_parmask$D_IN;
  wire rg_parmask$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  reg [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_fabric_write_reqs
  reg [130 : 0] f_fabric_write_reqs$D_IN;
  wire [130 : 0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$CLR,
       f_fabric_write_reqs$DEQ,
       f_fabric_write_reqs$EMPTY_N,
       f_fabric_write_reqs$ENQ,
       f_fabric_write_reqs$FULL_N;

  // ports of submodule f_pte_writebacks
  wire [127 : 0] f_pte_writebacks$D_IN, f_pte_writebacks$D_OUT;
  wire f_pte_writebacks$CLR,
       f_pte_writebacks$DEQ,
       f_pte_writebacks$EMPTY_N,
       f_pte_writebacks$ENQ,
       f_pte_writebacks$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  reg [96 : 0] master_xactor_f_rd_addr$D_IN;
  wire [96 : 0] master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [96 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [72 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [52 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [5 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // ports of submodule tlb
  reg [1 : 0] tlb$insert_level;
  wire [130 : 0] tlb$lookup;
  wire [63 : 0] tlb$insert_pte, tlb$insert_pte_pa;
  wire [26 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [15 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_fabric_send_write_req,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_ptw_level_2,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_RL_rl_writeback_updated_PTE,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_fabric_send_write_req,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_ptw_level_2,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_RL_rl_writeback_updated_PTE,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [130 : 0] MUX_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_f_fabric_write_reqs$enq_1__VAL_3,
		 MUX_f_fabric_write_reqs$enq_1__VAL_4;
  wire [96 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_3,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_4,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_5;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2;
  wire [52 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [4 : 0] MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_14,
	       MUX_rg_state$write_1__VAL_15,
	       MUX_rg_state$write_1__VAL_17,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_4;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1, MUX_rg_exc_code$write_1__VAL_5;
  wire MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_1,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_3,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_exc_code$write_1__SEL_8,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_17,
       MUX_rg_state$write_1__SEL_18,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3,
       MUX_tlb$insert_1__SEL_4;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result2315_0x4_re_ETC__q50,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result4880_0x4_re_ETC__q30,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result9039_0x4_re_ETC__q34,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result9104_0x4_re_ETC__q35,
	       CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q33,
	       CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q52,
	       IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718,
	       IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727,
	       IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783,
	       IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560,
	       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588,
	       IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736,
	       IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801,
	       IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676,
	       _theResult_____2__h19201,
	       _theResult_____2__h30520,
	       _theResult___fst__h6559,
	       ld_val__h28268,
	       mem_req_wr_data_wdata__h3226,
	       new_ld_val__h30474,
	       new_value__h17794,
	       new_value__h7767,
	       pabase__h6553,
	       w1__h19193,
	       w1__h30508,
	       w1__h30512;
  reg [31 : 0] v__h15053,
	       v__h15059,
	       v__h18697,
	       v__h18703,
	       v__h22122,
	       v__h22128,
	       v__h22797,
	       v__h22803,
	       v__h22969,
	       v__h22975,
	       v__h23040,
	       v__h23046,
	       v__h23328,
	       v__h23334,
	       v__h23440,
	       v__h23446,
	       v__h23833,
	       v__h23839,
	       v__h24002,
	       v__h24008,
	       v__h24073,
	       v__h24079,
	       v__h24361,
	       v__h24367,
	       v__h24473,
	       v__h24479,
	       v__h24873,
	       v__h24879,
	       v__h24944,
	       v__h24950,
	       v__h25015,
	       v__h25021,
	       v__h25097,
	       v__h25103,
	       v__h25224,
	       v__h25230,
	       v__h25982,
	       v__h25988,
	       v__h26204,
	       v__h26210,
	       v__h27803,
	       v__h27809,
	       v__h28153,
	       v__h28159,
	       v__h29253,
	       v__h29259,
	       v__h29360,
	       v__h29366,
	       v__h29465,
	       v__h29471,
	       v__h29545,
	       v__h29551,
	       v__h29755,
	       v__h29761,
	       v__h29873,
	       v__h29879,
	       v__h30167,
	       v__h30173,
	       v__h30342,
	       v__h30348,
	       v__h30438,
	       v__h30444,
	       v__h32601,
	       v__h32607,
	       v__h33169,
	       v__h33175,
	       v__h33208,
	       v__h33214,
	       v__h33563,
	       v__h33569,
	       v__h3465,
	       v__h3471,
	       v__h34783,
	       v__h34789,
	       v__h4250,
	       v__h4256,
	       v__h4619,
	       v__h4625,
	       v__h4720,
	       v__h4726,
	       v__h5173,
	       v__h5179;
  reg [7 : 0] mem_req_wr_data_wstrb__h3227;
  reg [2 : 0] value__h30060, x__h3041;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29,
      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d317,
      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d322,
      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d245,
      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d253,
      IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267,
      IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d329;
  wire [63 : 0] IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_1_E_ETC___d621,
		IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295,
		IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607,
		IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740,
		IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d819,
		_theResult___fst__h3162,
		_theResult___snd_fst__h6202,
		_theResult___snd_fst__h6273,
		_theResult___snd_fst__h6561,
		_theResult___snd_snd_fst__h6204,
		_theResult___snd_snd_fst__h6275,
		cline_fabric_addr__h25283,
		lev_0_pte_pa__h24111,
		lev_0_pte_pa_w64_fa__h24113,
		lev_1_PTN_pa__h23076,
		lev_1_pte_pa__h23078,
		lev_1_pte_pa_w64_fa__h23080,
		lev_2_pte_pa__h22181,
		lev_2_pte_pa_w64_fa__h22183,
		new_st_val__h18923,
		new_st_val__h19205,
		new_st_val__h19296,
		new_st_val__h20276,
		new_st_val__h20280,
		new_st_val__h20284,
		new_st_val__h20288,
		new_st_val__h20293,
		new_st_val__h20299,
		new_st_val__h20304,
		new_st_val__h30524,
		new_st_val__h30615,
		new_st_val__h32475,
		new_st_val__h32479,
		new_st_val__h32483,
		new_st_val__h32487,
		new_st_val__h32492,
		new_st_val__h32498,
		new_st_val__h32503,
		pa___1__h6575,
		pa___1__h6610,
		pa___1__h6664,
		pabase___1__h6576,
		pabase___1__h6611,
		pabase___1__h6665,
		pte___1__h7020,
		pte___1__h7048,
		pte___2__h6557,
		result__h14176,
		result__h14204,
		result__h14232,
		result__h14260,
		result__h14288,
		result__h14316,
		result__h14344,
		result__h14389,
		result__h14417,
		result__h14445,
		result__h14473,
		result__h14501,
		result__h14529,
		result__h14557,
		result__h14585,
		result__h14630,
		result__h14658,
		result__h14686,
		result__h14714,
		result__h14755,
		result__h14783,
		result__h14811,
		result__h14839,
		result__h14880,
		result__h14908,
		result__h14947,
		result__h14975,
		result__h28328,
		result__h28358,
		result__h28385,
		result__h28412,
		result__h28439,
		result__h28466,
		result__h28493,
		result__h28520,
		result__h28564,
		result__h28591,
		result__h28618,
		result__h28645,
		result__h28672,
		result__h28699,
		result__h28726,
		result__h28753,
		result__h28797,
		result__h28824,
		result__h28851,
		result__h28878,
		result__h28918,
		result__h28945,
		result__h28972,
		result__h28999,
		result__h29039,
		result__h29066,
		result__h29104,
		result__h29131,
		result__h30703,
		result__h31611,
		result__h31639,
		result__h31667,
		result__h31695,
		result__h31723,
		result__h31751,
		result__h31779,
		result__h31824,
		result__h31852,
		result__h31880,
		result__h31908,
		result__h31936,
		result__h31964,
		result__h31992,
		result__h32020,
		result__h32065,
		result__h32093,
		result__h32121,
		result__h32149,
		result__h32190,
		result__h32218,
		result__h32246,
		result__h32274,
		result__h32315,
		result__h32343,
		result__h32382,
		result__h32410,
		result__h7820,
		satp_pa__h2098,
		value__h7065,
		vpn_0_pa__h24110,
		vpn_1_pa__h23077,
		vpn_2_pa__h22180,
		w1___1__h19264,
		w1___1__h30583,
		w2___1__h30584,
		w2__h30514,
		word64__h7586,
		x1_avValue_pa__h6111,
		x__h15446,
		x__h30503,
		y__h7856;
  wire [55 : 0] x__h23157,
		x__h5299,
		x__h6579,
		x__h6614,
		x__h6668,
		x__h6762,
		x__h6807,
		x__h6873;
  wire [31 : 0] ld_val8268_BITS_31_TO_0__q38,
		ld_val8268_BITS_63_TO_32__q45,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10,
		new_value767_BITS_31_TO_0__q31,
		rg_st_amo_val_BITS_31_TO_0__q32,
		w10508_BITS_31_TO_0__q51,
		word64586_BITS_31_TO_0__q17,
		word64586_BITS_63_TO_32__q24;
  wire [15 : 0] ld_val8268_BITS_15_TO_0__q37,
		ld_val8268_BITS_31_TO_16__q41,
		ld_val8268_BITS_47_TO_32__q42,
		ld_val8268_BITS_63_TO_48__q48,
		master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6,
		master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13,
		word64586_BITS_15_TO_0__q16,
		word64586_BITS_31_TO_16__q20,
		word64586_BITS_47_TO_32__q23,
		word64586_BITS_63_TO_48__q27;
  wire [7 : 0] ld_val8268_BITS_15_TO_8__q39,
	       ld_val8268_BITS_23_TO_16__q40,
	       ld_val8268_BITS_31_TO_24__q43,
	       ld_val8268_BITS_39_TO_32__q44,
	       ld_val8268_BITS_47_TO_40__q46,
	       ld_val8268_BITS_55_TO_48__q47,
	       ld_val8268_BITS_63_TO_56__q49,
	       ld_val8268_BITS_7_TO_0__q36,
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1,
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4,
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5,
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7,
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8,
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11,
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12,
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14,
	       strobe64__h3161,
	       strobe64__h3164,
	       strobe64__h3167,
	       word64586_BITS_15_TO_8__q18,
	       word64586_BITS_23_TO_16__q19,
	       word64586_BITS_31_TO_24__q21,
	       word64586_BITS_39_TO_32__q22,
	       word64586_BITS_47_TO_40__q25,
	       word64586_BITS_55_TO_48__q26,
	       word64586_BITS_63_TO_56__q28,
	       word64586_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h3010;
  wire [4 : 0] IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d430,
	       IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d429,
	       IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d432;
  wire [3 : 0] access_exc_code__h2779,
	       b__h22082,
	       exc_code___1__h6473,
	       x1_avValue_exc_code__h6112;
  wire IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d325,
       IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_NOT_ETC___d259,
       IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d335,
       IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d334,
       IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d338,
       IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479,
       IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170,
       NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d316,
       NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d321,
       NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d324,
       NOT_cfg_verbosity_read__9_ULE_1_0_1_AND_NOT_rg_ETC___d385,
       NOT_cfg_verbosity_read__9_ULE_2_067___d1068,
       NOT_cfg_verbosity_read__9_ULT_2_37___d438,
       NOT_dmem_not_imem_27_AND_rg_op_12_EQ_0_13_OR_r_ETC___d370,
       NOT_dmem_not_imem_27_OR_NOT_rg_op_12_EQ_0_13_1_ETC___d134,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d670,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d683,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d810,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d822,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d840,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d871,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d876,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d882,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d886,
       NOT_master_xactor_f_rd_data_first__04_BITS_2_T_ETC___d928,
       NOT_master_xactor_f_rd_data_first__04_BITS_2_T_ETC___d991,
       NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d935,
       NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d997,
       NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241,
       NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d481,
       NOT_req_f3_BITS_1_TO_0_380_EQ_0b0_381_382_AND__ETC___d1401,
       NOT_rg_f3_23_EQ_0b11_60_61_OR_rg_amo_funct7_17_ETC___d326,
       NOT_rg_op_12_EQ_0_13_14_AND_NOT_rg_op_12_EQ_2__ETC___d423,
       NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d490,
       NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d680,
       NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d807,
       NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d869,
       NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d874,
       NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d880,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d678,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d805,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d843,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d849,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d855,
       NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d377,
       NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d402,
       NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d442,
       NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d627,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d190,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d337,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d340,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d399,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d465,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d474,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d495,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d496,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d502,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d503,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d631,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d636,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d642,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d649,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d655,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d661,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d672,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d685,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d812,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d817,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d818,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d824,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d830,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d836,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d842,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d847,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d848,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d853,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d859,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d860,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d865,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d866,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d873,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d884,
       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d888,
       NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d149,
       NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d187,
       NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d463,
       NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d471,
       NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665,
       cfg_verbosity_read__9_ULE_1___d40,
       dmem_not_imem_AND_rg_op_12_EQ_0_13_OR_rg_op_12_ETC___d372,
       dmem_not_imem_OR_NOT_rg_op_12_EQ_0_13_14_AND_N_ETC___d126,
       lrsc_result__h15436,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1013,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1017,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1023,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1048,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d970,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d978,
       master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d982,
       ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220,
       ram_state_and_ctag_cset_b_read__15_BIT_52_16_A_ETC___d482,
       req_f3_BITS_1_TO_0_380_EQ_0b0_381_OR_req_f3_BI_ETC___d1410,
       rg_amo_funct7_17_BITS_6_TO_2_18_EQ_0b10_19_AND_ETC___d658,
       rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d418,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d468,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d493,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d497,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d633,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d652,
       rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d491,
       rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d681,
       rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d808,
       rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d813,
       rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143,
       rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d178,
       rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d386,
       rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409,
       rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d426,
       rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d427,
       rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d448,
       rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d460,
       rg_priv_5_ULE_0b1___d86,
       rg_state_9_EQ_13_095_AND_rg_op_12_EQ_0_13_OR_r_ETC___d1097,
       rg_state_9_EQ_3_42_AND_NOT_rg_op_12_EQ_0_13_14_ETC___d346,
       tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d132,
       tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d173,
       tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d379,
       y__h6399;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h28268 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h30474 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h28268;
      MUX_dw_output_ld_val$wset_1__SEL_2: word64 = new_ld_val__h30474;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 5'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule f_fabric_write_reqs
  FIFO2 #(.width(32'd131), .guarded(32'd1)) f_fabric_write_reqs(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_fabric_write_reqs$D_IN),
								.ENQ(f_fabric_write_reqs$ENQ),
								.DEQ(f_fabric_write_reqs$DEQ),
								.CLR(f_fabric_write_reqs$CLR),
								.D_OUT(f_fabric_write_reqs$D_OUT),
								.FULL_N(f_fabric_write_reqs$FULL_N),
								.EMPTY_N(f_fabric_write_reqs$EMPTY_N));

  // submodule f_pte_writebacks
  FIFO2 #(.width(32'd128), .guarded(32'd1)) f_pte_writebacks(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_pte_writebacks$D_IN),
							     .ENQ(f_pte_writebacks$ENQ),
							     .DEQ(f_pte_writebacks$DEQ),
							     .CLR(f_pte_writebacks$CLR),
							     .D_OUT(f_pte_writebacks$D_OUT),
							     .FULL_N(f_pte_writebacks$FULL_N),
							     .EMPTY_N(f_pte_writebacks$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd53),
	  .MEMSIZE(7'd64)) ram_state_and_ctag_cset(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(ram_state_and_ctag_cset$ADDRA),
						   .ADDRB(ram_state_and_ctag_cset$ADDRB),
						   .DIA(ram_state_and_ctag_cset$DIA),
						   .DIB(ram_state_and_ctag_cset$DIB),
						   .WEA(ram_state_and_ctag_cset$WEA),
						   .WEB(ram_state_and_ctag_cset$WEB),
						   .ENA(ram_state_and_ctag_cset$ENA),
						   .ENB(ram_state_and_ctag_cset$ENB),
						   .DOA(),
						   .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_flash_mem_addr_base(),
		    .m_flash_mem_addr_size(),
		    .m_flash_mem_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio_0_addr_base(),
		    .m_gpio_0_addr_size(),
		    .m_gpio_0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_fabric_send_write_req
  assign CAN_FIRE_RL_rl_fabric_send_write_req =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_fabric_send_write_req =
	     CAN_FIRE_RL_rl_fabric_send_write_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 6'd63 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 5'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__9_ULE_1___d40 || tlb$RDY_lookup) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d340 &&
	     rg_state_9_EQ_3_42_AND_NOT_rg_op_12_EQ_0_13_14_ETC___d346 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd5 &&
	     b__h22082 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_2
  assign CAN_FIRE_RL_rl_ptw_level_2 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     NOT_master_xactor_f_rd_data_first__04_BITS_2_T_ETC___d928 &&
	     rg_state == 5'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_2 =
	     CAN_FIRE_RL_rl_ptw_level_2 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     NOT_master_xactor_f_rd_data_first__04_BITS_2_T_ETC___d991 &&
	     rg_state == 5'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      !master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5] ||
	      !master_xactor_f_rd_data$D_OUT[6] &&
	      !master_xactor_f_rd_data$D_OUT[4] ||
	      tlb$RDY_insert) &&
	     rg_state == 5'd8 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd9 &&
	     b__h22082 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 5'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     master_xactor_f_rd_addr$FULL_N &&
	     rg_state_9_EQ_13_095_AND_rg_op_12_EQ_0_13_OR_r_ETC___d1097 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 5'd14 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     f_fabric_write_reqs$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 5'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_rl_writeback_updated_PTE =
	     f_pte_writebacks$EMPTY_N && f_fabric_write_reqs$FULL_N ;
  assign WILL_FIRE_RL_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_rl_writeback_updated_PTE &&
	     !WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_rl_io_write_req &&
	     !WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      f_fabric_write_reqs$FULL_N) &&
	     rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h22082 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 5'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d503 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d818 ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_380_EQ_0b0_381_OR_req_f3_BI_ETC___d1410 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_380_EQ_0b0_381_382_AND__ETC___d1401 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5] ||
	      !master_xactor_f_rd_data$D_OUT[6] &&
	      !master_xactor_f_rd_data$D_OUT[4] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d997 ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d935 ;
  assign MUX_rg_exc_code$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && rg_priv_5_ULE_0b1___d86 &&
	     rg_satp[63:60] == 4'd8 &&
	     tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d173 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d672 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d496 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_17 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d427 ;
  assign MUX_rg_state$write_1__SEL_18 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	     rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d978 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1013 ;
  assign MUX_tlb$insert_1__SEL_4 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h7767 :
	       new_value__h17794 ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = { rg_f3, rg_pa, x__h30503 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 =
	     { rg_f3,
	       x1_avValue_pa__h6111,
	       IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d819 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_3 =
	     { 3'b011, f_pte_writebacks$D_OUT } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_4 =
	     { rg_f3, rg_pa, rg_st_amo_val } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, lev_1_pte_pa_w64_fa__h23080, 29'd851968 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, lev_0_pte_pa_w64_fa__h24113, 29'd851968 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_3 =
	     { 4'd0, rg_pa, 8'd0, value__h30060, 18'd65536 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_4 =
	     { 4'd0, lev_2_pte_pa_w64_fa__h22183, 29'd851968 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_5 =
	     { 4'd0, cline_fabric_addr__h25283, 29'd15532032 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736 :
	       IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 6'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_5 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       exc_code___1__h6473 :
	       access_exc_code__h2779 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h15446 :
	       IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_380_EQ_0b0_381_382_AND__ETC___d1401 ?
	       5'd4 :
	       5'd3 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ? 5'd15 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!master_xactor_f_rd_data$D_OUT[3] ||
		 !master_xactor_f_rd_data$D_OUT[4] &&
		 master_xactor_f_rd_data$D_OUT[5] ||
		 !master_xactor_f_rd_data$D_OUT[6] &&
		 !master_xactor_f_rd_data$D_OUT[4]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_14 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!master_xactor_f_rd_data$D_OUT[3] ||
		 !master_xactor_f_rd_data$D_OUT[4] &&
		 master_xactor_f_rd_data$D_OUT[5]) ?
		  5'd4 :
		  ((!master_xactor_f_rd_data$D_OUT[6] &&
		    !master_xactor_f_rd_data$D_OUT[4]) ?
		     5'd8 :
		     ((master_xactor_f_rd_data$D_OUT[21:13] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_15 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!master_xactor_f_rd_data$D_OUT[3] ||
		 !master_xactor_f_rd_data$D_OUT[4] &&
		 master_xactor_f_rd_data$D_OUT[5]) ?
		  5'd4 :
		  ((!master_xactor_f_rd_data$D_OUT[6] &&
		    !master_xactor_f_rd_data$D_OUT[4]) ?
		     5'd7 :
		     ((master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
		       master_xactor_f_rd_data$D_OUT[21:13] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_17 =
	     (rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130]) ?
	       5'd5 :
	       IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d432 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_read_rsp ||
	      WILL_FIRE_RL_rl_io_AMO_read_rsp) &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d503 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h22082 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h22082 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;
  assign crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, crg_sb_to_load_delay[10:1] } ;
  assign crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d812 ;
  assign crg_sb_to_load_delay$port2__read =
	     crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       crg_sb_to_load_delay$port0__write_1 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register crg_sb_to_load_delay
  assign crg_sb_to_load_delay$D_IN = crg_sb_to_load_delay$port2__read ;
  assign crg_sb_to_load_delay$EN = 1'b1 ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h2779 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  MUX_rg_exc_code$write_1__VAL_5 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or
	  MUX_rg_exc_code$write_1__SEL_8 or x1_avValue_exc_code__h6112)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h2779;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_8:
	rg_exc_code$D_IN = x1_avValue_exc_code__h6112;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && rg_priv_5_ULE_0b1___d86 &&
	     rg_satp[63:60] == 4'd8 &&
	     tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d173 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_380_EQ_0b0_381_382_AND__ETC___d1401 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d935 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d997 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5] ||
	      !master_xactor_f_rd_data$D_OUT[6] &&
	      !master_xactor_f_rd_data$D_OUT[4] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h30474 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h28268 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2: rg_ld_val$D_IN = new_ld_val__h30474;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h28268;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d672 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = x1_avValue_pa__h6111 ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d642 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d497 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d496 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mrbm
  assign rg_mrbm$D_IN = req_mrbm ;
  assign rg_mrbm$EN = EN_req ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : x1_avValue_pa__h6111 ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d465 ||
	     EN_req ;

  // register rg_parbase
  assign rg_parbase$D_IN = req_parbase ;
  assign rg_parbase$EN = EN_req ;

  // register rg_parmask
  assign rg_parmask$D_IN = req_parmask ;
  assign rg_parmask$EN = EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  always@(MUX_master_xactor_f_rd_addr$enq_1__SEL_1 or
	  lev_1_pte_pa__h23078 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_2 or
	  lev_0_pte_pa__h24111 or
	  WILL_FIRE_RL_rl_start_tlb_refill or lev_2_pte_pa__h22181)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_f_rd_addr$enq_1__SEL_1:
	  rg_pte_pa$D_IN = lev_1_pte_pa__h23078;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_2:
	  rg_pte_pa$D_IN = lev_0_pte_pa__h24111;
      WILL_FIRE_RL_rl_start_tlb_refill: rg_pte_pa$D_IN = lev_2_pte_pa__h22181;
      default: rg_pte_pa$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h18923 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d888 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_14 or
	  WILL_FIRE_RL_rl_ptw_level_2 or
	  MUX_rg_state$write_1__VAL_15 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_rg_state$write_1__SEL_17 or
	  MUX_rg_state$write_1__VAL_17 or MUX_rg_state$write_1__SEL_18)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 5'd2;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 5'd16;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_write_req:
	rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 5'd14;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 5'd3;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 5'd10;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_14;
    WILL_FIRE_RL_rl_ptw_level_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_15;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 5'd6;
    MUX_rg_state$write_1__SEL_17:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_17;
    MUX_rg_state$write_1__SEL_18: rg_state$D_IN = 5'd2;
    default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d427 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_fabric_write_reqs
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_writeback_updated_PTE or
	  MUX_f_fabric_write_reqs$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_f_fabric_write_reqs$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_f_fabric_write_reqs$enq_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_writeback_updated_PTE:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_3;
      WILL_FIRE_RL_rl_io_write_req:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_4;
      default: f_fabric_write_reqs$D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d818 ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule f_pte_writebacks
  assign f_pte_writebacks$D_IN = { tlb$lookup[63:0], value__h7065 } ;
  assign f_pte_writebacks$ENQ = MUX_tlb$insert_1__SEL_1 ;
  assign f_pte_writebacks$DEQ = WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign f_pte_writebacks$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_18 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_18 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  always@(MUX_master_xactor_f_rd_addr$enq_1__SEL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_2 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_2 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_3 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_4 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_f_rd_addr$enq_1__SEL_1:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_1;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_2:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_3:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_3;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_4;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_5;
      default: master_xactor_f_rd_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ;
  assign master_xactor_f_rd_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       f_fabric_write_reqs$D_OUT[127:64],
	       8'd0,
	       x__h3041,
	       18'd65536 } ;
  assign master_xactor_f_wr_addr$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { mem_req_wr_data_wdata__h3226,
	       mem_req_wr_data_wstrb__h3227,
	       1'd1 } ;
  assign master_xactor_f_wr_data$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = CAN_FIRE_RL_rl_discard_write_rsp ;
  assign master_xactor_f_wr_resp$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       rg_addr[11:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       53'h0AAAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       53'h0AAAAAAAAAAAAA /* unspecified value */  :
	       53'h0AAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_380_EQ_0b0_381_OR_req_f3_BI_ETC___d1410 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_f_rd_data$D_OUT[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d685 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_380_EQ_0b0_381_OR_req_f3_BI_ETC___d1410 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = x1_avValue_pa__h6111 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[59:44] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  tlb$lookup or
	  MUX_tlb$insert_1__SEL_2 or
	  MUX_tlb$insert_1__SEL_3 or MUX_tlb$insert_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = tlb$lookup[65:64];
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd2;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_4: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte =
	     (MUX_tlb$insert_1__SEL_2 || MUX_tlb$insert_1__SEL_3 ||
	      MUX_tlb$insert_1__SEL_4) ?
	       master_xactor_f_rd_data$D_OUT[66:3] :
	       value__h7065 ;
  assign tlb$insert_pte_pa =
	     MUX_tlb$insert_1__SEL_1 ? tlb$lookup[63:0] : rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[38:12] ;
  assign tlb$lookup_asid = rg_satp[59:44] ;
  assign tlb$lookup_vpn = rg_addr[38:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	     rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d978 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1013 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d325 =
	     (x1_avValue_pa__h6111[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29 :
	       NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d324 ;
  assign IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_1_E_ETC___d621 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h28268 : 64'd0 ;
  assign IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_NOT_ETC___d259 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241 ;
  assign IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607 =
	     (rg_addr[2:0] == 3'h0) ? word64__h7586 : 64'd0 ;
  assign IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q32[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q32 } :
	       rg_st_amo_val ;
  assign IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d335 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 ||
	       IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267 :
	       IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d334 ;
  assign IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d430 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       5'd9 :
	       IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d429 ;
  assign IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d334 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h15436 ||
	       f_fabric_write_reqs$FULL_N :
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 ||
	       f_fabric_write_reqs$FULL_N &&
	       IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d329 &&
	       IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267 ;
  assign IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d429 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       5'd12 :
	       ((!ram_state_and_ctag_cset$DOB[52] ||
		 !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) ?
		  5'd9 :
		  5'd12) ;
  assign IF_rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d819 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_st_amo_val :
	       new_st_val__h18923 ;
  assign IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d338 =
	     (rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	      tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d173) ?
	       tlb$RDY_lookup :
	       NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d337 ;
  assign IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d432 =
	     (rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	      tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d173) ?
	       5'd4 :
	       ((dmem_not_imem && !soc_map$m_is_mem_addr) ?
		  5'd13 :
		  IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d430) ;
  assign IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479 =
	     x1_avValue_pa__h6111 == rg_lrsc_pa ;
  assign IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 =
	     (pabase__h6553 & rg_parmask) == pabase__h6553 ;
  assign NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d316 =
	     x1_avValue_pa__h6111[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29 ;
  assign NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d321 =
	     x1_avValue_pa__h6111[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29 ;
  assign NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d324 =
	     x1_avValue_pa__h6111[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29 ;
  assign NOT_cfg_verbosity_read__9_ULE_1_0_1_AND_NOT_rg_ETC___d385 =
	     !cfg_verbosity_read__9_ULE_1___d40 &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130] &&
	      NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d377 &&
	      tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d379 &&
	      !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170) ;
  assign NOT_cfg_verbosity_read__9_ULE_2_067___d1068 = cfg_verbosity > 4'd2 ;
  assign NOT_cfg_verbosity_read__9_ULT_2_37___d438 = cfg_verbosity >= 4'd2 ;
  assign NOT_dmem_not_imem_27_AND_rg_op_12_EQ_0_13_OR_r_ETC___d370 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[69] ;
  assign NOT_dmem_not_imem_27_OR_NOT_rg_op_12_EQ_0_13_1_ETC___d134 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d132 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d670 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[52] &&
	      ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d683 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d681 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d810 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d808 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d822 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d840 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d871 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d869 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d876 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d874 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d882 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d880 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d886 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d680 ;
  assign NOT_master_xactor_f_rd_data_first__04_BITS_2_T_ETC___d928 =
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     ((!master_xactor_f_rd_data$D_OUT[6] &&
	       !master_xactor_f_rd_data$D_OUT[4]) ?
		master_xactor_f_rd_addr$FULL_N :
		master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
		master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 ||
		tlb$RDY_insert) ;
  assign NOT_master_xactor_f_rd_data_first__04_BITS_2_T_ETC___d991 =
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     ((!master_xactor_f_rd_data$D_OUT[6] &&
	       !master_xactor_f_rd_data$D_OUT[4]) ?
		master_xactor_f_rd_addr$FULL_N :
		master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 ||
		tlb$RDY_insert) ;
  assign NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d935 =
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     (master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
	      master_xactor_f_rd_data$D_OUT[21:13] != 9'd0) ||
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign NOT_master_xactor_f_rd_data_first__04_BIT_3_08_ETC___d997 =
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 ||
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241 =
	     !ram_state_and_ctag_cset$DOB[52] || !rg_priv_5_ULE_0b1___d86 ||
	     rg_satp[63:60] != 4'd8 ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d481 =
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479 ;
  assign NOT_req_f3_BITS_1_TO_0_380_EQ_0b0_381_382_AND__ETC___d1401 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_23_EQ_0b11_60_61_OR_rg_amo_funct7_17_ETC___d326 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29 ;
  assign NOT_rg_op_12_EQ_0_13_14_AND_NOT_rg_op_12_EQ_2__ETC___d423 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276) ;
  assign NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d490 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479 ;
  assign NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d680 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 ;
  assign NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d807 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     (rg_f3 == 3'b0 || rg_f3 == 3'b001) ;
  assign NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d869 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d874 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d880 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d678 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d805 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     (rg_f3 == 3'b0 || rg_f3 == 3'b001) ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d843 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d849 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d855 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d377 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_27_AND_rg_op_12_EQ_0_13_OR_r_ETC___d370 ||
	      dmem_not_imem_AND_rg_op_12_EQ_0_13_OR_rg_op_12_ETC___d372 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[68]) ;
  assign NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d402 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[68] ;
  assign NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d442 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     tlb$lookup[72] &&
	     !pte___2__h6557[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d627 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[69] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d132) ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d190 =
	     !rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d178 ||
	     NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d187 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d337 =
	     (NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d190 ||
	      tlb$RDY_lookup && tlb$RDY_insert && f_pte_writebacks$FULL_N) &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d335) ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d340 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup) &&
	     (rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130] ||
	      IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d338) ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d399 =
	     !rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d178 ||
	     NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d187 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d465 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d463) ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d474 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d471) &&
	     dmem_not_imem &&
	     !soc_map$m_is_mem_addr &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d495 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d463) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d493 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d496 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d495 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d502 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d463) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d497 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h15436) ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d503 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d502 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d631 =
	     !rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d627 &&
	     tlb$lookup[72] &&
	     !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d636 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d631 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d633 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d642 =
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d631 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d649 =
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d631 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d655 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d631 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d652 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d661 =
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d631 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_17_BITS_6_TO_2_18_EQ_0b10_19_AND_ETC___d658 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d672 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d670 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d685 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d683 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d812 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d810 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d817 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d813 ||
	      NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d680) ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d818 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d817 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d824 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d822 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d830 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d836 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d842 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d840 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d847 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d843 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d848 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d847 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d853 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d849 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d859 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d855 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d860 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d859 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d865 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h15436 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d866 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d865 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d873 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d871 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d876 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d884 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d882 ;
  assign NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d888 =
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665) &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d886 ;
  assign NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d149 =
	     !tlb$lookup[72] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[73] ;
  assign NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d187 =
	     !tlb$lookup[72] || !tlb$lookup[73] || pte___2__h6557[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d463 =
	     !tlb$lookup[130] ||
	     NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d377 &&
	     tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d379 &&
	     !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 ;
  assign NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d471 =
	     !tlb$lookup[130] ||
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d468 &&
	     tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d379 &&
	     !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 ;
  assign NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d665 =
	     !tlb$lookup[130] ||
	     NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d402 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] &&
	     !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 ;
  assign _theResult___fst__h3162 =
	     f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h3010 ;
  assign _theResult___snd_fst__h6202 =
	     tlb$lookup[130] ? _theResult___snd_fst__h6273 : rg_addr ;
  assign _theResult___snd_fst__h6273 =
	     (rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d149) ?
	       rg_addr :
	       _theResult___fst__h6559 ;
  assign _theResult___snd_fst__h6561 =
	     (!pte___2__h6557[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h7048 :
	       pte___2__h6557 ;
  assign _theResult___snd_snd_fst__h6204 =
	     tlb$lookup[130] ?
	       _theResult___snd_snd_fst__h6275 :
	       tlb$lookup[129:66] ;
  assign _theResult___snd_snd_fst__h6275 =
	     (rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d149) ?
	       tlb$lookup[129:66] :
	       _theResult___snd_fst__h6561 ;
  assign access_exc_code__h2779 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h22082 =
	     CAN_FIRE_RL_rl_fabric_send_write_req ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__9_ULE_1___d40 = cfg_verbosity <= 4'd1 ;
  assign cline_fabric_addr__h25283 = { rg_pa[63:6], 6'd0 } ;
  assign dmem_not_imem_AND_rg_op_12_EQ_0_13_OR_rg_op_12_ETC___d372 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d132 ;
  assign dmem_not_imem_OR_NOT_rg_op_12_EQ_0_13_14_AND_N_ETC___d126 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[69] ;
  assign exc_code___1__h6473 = x1_avValue_exc_code__h6112 ;
  assign ld_val8268_BITS_15_TO_0__q37 = ld_val__h28268[15:0] ;
  assign ld_val8268_BITS_15_TO_8__q39 = ld_val__h28268[15:8] ;
  assign ld_val8268_BITS_23_TO_16__q40 = ld_val__h28268[23:16] ;
  assign ld_val8268_BITS_31_TO_0__q38 = ld_val__h28268[31:0] ;
  assign ld_val8268_BITS_31_TO_16__q41 = ld_val__h28268[31:16] ;
  assign ld_val8268_BITS_31_TO_24__q43 = ld_val__h28268[31:24] ;
  assign ld_val8268_BITS_39_TO_32__q44 = ld_val__h28268[39:32] ;
  assign ld_val8268_BITS_47_TO_32__q42 = ld_val__h28268[47:32] ;
  assign ld_val8268_BITS_47_TO_40__q46 = ld_val__h28268[47:40] ;
  assign ld_val8268_BITS_55_TO_48__q47 = ld_val__h28268[55:48] ;
  assign ld_val8268_BITS_63_TO_32__q45 = ld_val__h28268[63:32] ;
  assign ld_val8268_BITS_63_TO_48__q48 = ld_val__h28268[63:48] ;
  assign ld_val8268_BITS_63_TO_56__q49 = ld_val__h28268[63:56] ;
  assign ld_val8268_BITS_7_TO_0__q36 = ld_val__h28268[7:0] ;
  assign lev_0_pte_pa__h24111 = lev_1_PTN_pa__h23076 + vpn_0_pa__h24110 ;
  assign lev_0_pte_pa_w64_fa__h24113 = { lev_0_pte_pa__h24111[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h23076 = { 8'd0, x__h23157 } ;
  assign lev_1_pte_pa__h23078 = lev_1_PTN_pa__h23076 + vpn_1_pa__h23077 ;
  assign lev_1_pte_pa_w64_fa__h23080 = { lev_1_pte_pa__h23078[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h22181 = satp_pa__h2098 + vpn_2_pa__h22180 ;
  assign lev_2_pte_pa_w64_fa__h22183 = { lev_2_pte_pa__h22181[63:3], 3'b0 } ;
  assign lrsc_result__h15436 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276 ;
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 =
	     master_xactor_f_rd_data$D_OUT[10:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 =
	     master_xactor_f_rd_data$D_OUT[18:11] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 =
	     master_xactor_f_rd_data$D_OUT[18:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 =
	     master_xactor_f_rd_data$D_OUT[26:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 =
	     master_xactor_f_rd_data$D_OUT[34:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 =
	     master_xactor_f_rd_data$D_OUT[34:27] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 =
	     master_xactor_f_rd_data$D_OUT[34:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 =
	     master_xactor_f_rd_data$D_OUT[42:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 =
	     master_xactor_f_rd_data$D_OUT[50:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 =
	     master_xactor_f_rd_data$D_OUT[50:43] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 =
	     master_xactor_f_rd_data$D_OUT[58:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 =
	     master_xactor_f_rd_data$D_OUT[66:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 =
	     master_xactor_f_rd_data$D_OUT[66:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 =
	     master_xactor_f_rd_data$D_OUT[66:59] ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1013 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1017 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1023 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1048 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     (!master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5]) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d970 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     (master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
	      master_xactor_f_rd_data$D_OUT[21:13] != 9'd0) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d978 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[30:22] == 9'd0 &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 ;
  assign master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d982 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[30:22] == 9'd0 &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign new_st_val__h18923 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h19205 :
	       _theResult_____2__h19201 ;
  assign new_st_val__h19205 = { 32'd0, _theResult_____2__h19201[31:0] } ;
  assign new_st_val__h19296 =
	     IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 +
	     IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740 ;
  assign new_st_val__h20276 = w1__h19193 ^ w2__h30514 ;
  assign new_st_val__h20280 = w1__h19193 & w2__h30514 ;
  assign new_st_val__h20284 = w1__h19193 | w2__h30514 ;
  assign new_st_val__h20288 =
	     (w1__h19193 < w2__h30514) ? w1__h19193 : w2__h30514 ;
  assign new_st_val__h20293 =
	     (w1__h19193 <= w2__h30514) ? w2__h30514 : w1__h19193 ;
  assign new_st_val__h20299 =
	     ((IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740 ^
	       64'h8000000000000000)) ?
	       w1__h19193 :
	       w2__h30514 ;
  assign new_st_val__h20304 =
	     ((IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740 ^
	       64'h8000000000000000)) ?
	       w2__h30514 :
	       w1__h19193 ;
  assign new_st_val__h30524 = { 32'd0, _theResult_____2__h30520[31:0] } ;
  assign new_st_val__h30615 =
	     new_ld_val__h30474 +
	     IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740 ;
  assign new_st_val__h32475 = w1__h30512 ^ w2__h30514 ;
  assign new_st_val__h32479 = w1__h30512 & w2__h30514 ;
  assign new_st_val__h32483 = w1__h30512 | w2__h30514 ;
  assign new_st_val__h32487 =
	     (w1__h30512 < w2__h30514) ? w1__h30512 : w2__h30514 ;
  assign new_st_val__h32492 =
	     (w1__h30512 <= w2__h30514) ? w2__h30514 : w1__h30512 ;
  assign new_st_val__h32498 =
	     ((new_ld_val__h30474 ^ 64'h8000000000000000) <
	      (IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740 ^
	       64'h8000000000000000)) ?
	       w1__h30512 :
	       w2__h30514 ;
  assign new_st_val__h32503 =
	     ((new_ld_val__h30474 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_rg_st_amo_val_ETC___d740 ^
	       64'h8000000000000000)) ?
	       w2__h30514 :
	       w1__h30512 ;
  assign new_value767_BITS_31_TO_0__q31 = new_value__h7767[31:0] ;
  assign pa___1__h6575 = { 8'd0, x__h6762 } ;
  assign pa___1__h6610 = { 8'd0, x__h6807 } ;
  assign pa___1__h6664 = { 8'd0, x__h6873 } ;
  assign pabase___1__h6576 = { 8'd0, x__h6579 } ;
  assign pabase___1__h6611 = { 8'd0, x__h6614 } ;
  assign pabase___1__h6665 = { 8'd0, x__h6668 } ;
  assign pte___1__h7020 = { tlb$lookup[129:73], 1'd1, tlb$lookup[71:66] } ;
  assign pte___1__h7048 =
	     { pte___2__h6557[63:8], 1'd1, pte___2__h6557[6:0] } ;
  assign pte___2__h6557 =
	     tlb$lookup[72] ? tlb$lookup[129:66] : pte___1__h7020 ;
  assign ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 =
	     ram_state_and_ctag_cset$DOB[51:0] ==
	     x1_avValue_pa__h6111[63:12] ;
  assign ram_state_and_ctag_cset_b_read__15_BIT_52_16_A_ETC___d482 =
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d481 ;
  assign req_f3_BITS_1_TO_0_380_EQ_0b0_381_OR_req_f3_BI_ETC___d1410 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h14176 =
	     { {56{word64586_BITS_15_TO_8__q18[7]}},
	       word64586_BITS_15_TO_8__q18 } ;
  assign result__h14204 =
	     { {56{word64586_BITS_23_TO_16__q19[7]}},
	       word64586_BITS_23_TO_16__q19 } ;
  assign result__h14232 =
	     { {56{word64586_BITS_31_TO_24__q21[7]}},
	       word64586_BITS_31_TO_24__q21 } ;
  assign result__h14260 =
	     { {56{word64586_BITS_39_TO_32__q22[7]}},
	       word64586_BITS_39_TO_32__q22 } ;
  assign result__h14288 =
	     { {56{word64586_BITS_47_TO_40__q25[7]}},
	       word64586_BITS_47_TO_40__q25 } ;
  assign result__h14316 =
	     { {56{word64586_BITS_55_TO_48__q26[7]}},
	       word64586_BITS_55_TO_48__q26 } ;
  assign result__h14344 =
	     { {56{word64586_BITS_63_TO_56__q28[7]}},
	       word64586_BITS_63_TO_56__q28 } ;
  assign result__h14389 = { 56'd0, word64__h7586[7:0] } ;
  assign result__h14417 = { 56'd0, word64__h7586[15:8] } ;
  assign result__h14445 = { 56'd0, word64__h7586[23:16] } ;
  assign result__h14473 = { 56'd0, word64__h7586[31:24] } ;
  assign result__h14501 = { 56'd0, word64__h7586[39:32] } ;
  assign result__h14529 = { 56'd0, word64__h7586[47:40] } ;
  assign result__h14557 = { 56'd0, word64__h7586[55:48] } ;
  assign result__h14585 = { 56'd0, word64__h7586[63:56] } ;
  assign result__h14630 =
	     { {48{word64586_BITS_15_TO_0__q16[15]}},
	       word64586_BITS_15_TO_0__q16 } ;
  assign result__h14658 =
	     { {48{word64586_BITS_31_TO_16__q20[15]}},
	       word64586_BITS_31_TO_16__q20 } ;
  assign result__h14686 =
	     { {48{word64586_BITS_47_TO_32__q23[15]}},
	       word64586_BITS_47_TO_32__q23 } ;
  assign result__h14714 =
	     { {48{word64586_BITS_63_TO_48__q27[15]}},
	       word64586_BITS_63_TO_48__q27 } ;
  assign result__h14755 = { 48'd0, word64__h7586[15:0] } ;
  assign result__h14783 = { 48'd0, word64__h7586[31:16] } ;
  assign result__h14811 = { 48'd0, word64__h7586[47:32] } ;
  assign result__h14839 = { 48'd0, word64__h7586[63:48] } ;
  assign result__h14880 =
	     { {32{word64586_BITS_31_TO_0__q17[31]}},
	       word64586_BITS_31_TO_0__q17 } ;
  assign result__h14908 =
	     { {32{word64586_BITS_63_TO_32__q24[31]}},
	       word64586_BITS_63_TO_32__q24 } ;
  assign result__h14947 = { 32'd0, word64__h7586[31:0] } ;
  assign result__h14975 = { 32'd0, word64__h7586[63:32] } ;
  assign result__h28328 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 } ;
  assign result__h28358 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 } ;
  assign result__h28385 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 } ;
  assign result__h28412 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 } ;
  assign result__h28439 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 } ;
  assign result__h28466 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 } ;
  assign result__h28493 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 } ;
  assign result__h28520 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 } ;
  assign result__h28564 = { 56'd0, master_xactor_f_rd_data$D_OUT[10:3] } ;
  assign result__h28591 = { 56'd0, master_xactor_f_rd_data$D_OUT[18:11] } ;
  assign result__h28618 = { 56'd0, master_xactor_f_rd_data$D_OUT[26:19] } ;
  assign result__h28645 = { 56'd0, master_xactor_f_rd_data$D_OUT[34:27] } ;
  assign result__h28672 = { 56'd0, master_xactor_f_rd_data$D_OUT[42:35] } ;
  assign result__h28699 = { 56'd0, master_xactor_f_rd_data$D_OUT[50:43] } ;
  assign result__h28726 = { 56'd0, master_xactor_f_rd_data$D_OUT[58:51] } ;
  assign result__h28753 = { 56'd0, master_xactor_f_rd_data$D_OUT[66:59] } ;
  assign result__h28797 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 } ;
  assign result__h28824 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 } ;
  assign result__h28851 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 } ;
  assign result__h28878 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 } ;
  assign result__h28918 = { 48'd0, master_xactor_f_rd_data$D_OUT[18:3] } ;
  assign result__h28945 = { 48'd0, master_xactor_f_rd_data$D_OUT[34:19] } ;
  assign result__h28972 = { 48'd0, master_xactor_f_rd_data$D_OUT[50:35] } ;
  assign result__h28999 = { 48'd0, master_xactor_f_rd_data$D_OUT[66:51] } ;
  assign result__h29039 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 } ;
  assign result__h29066 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 } ;
  assign result__h29104 = { 32'd0, master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign result__h29131 = { 32'd0, master_xactor_f_rd_data$D_OUT[66:35] } ;
  assign result__h30703 =
	     { {56{ld_val8268_BITS_7_TO_0__q36[7]}},
	       ld_val8268_BITS_7_TO_0__q36 } ;
  assign result__h31611 =
	     { {56{ld_val8268_BITS_15_TO_8__q39[7]}},
	       ld_val8268_BITS_15_TO_8__q39 } ;
  assign result__h31639 =
	     { {56{ld_val8268_BITS_23_TO_16__q40[7]}},
	       ld_val8268_BITS_23_TO_16__q40 } ;
  assign result__h31667 =
	     { {56{ld_val8268_BITS_31_TO_24__q43[7]}},
	       ld_val8268_BITS_31_TO_24__q43 } ;
  assign result__h31695 =
	     { {56{ld_val8268_BITS_39_TO_32__q44[7]}},
	       ld_val8268_BITS_39_TO_32__q44 } ;
  assign result__h31723 =
	     { {56{ld_val8268_BITS_47_TO_40__q46[7]}},
	       ld_val8268_BITS_47_TO_40__q46 } ;
  assign result__h31751 =
	     { {56{ld_val8268_BITS_55_TO_48__q47[7]}},
	       ld_val8268_BITS_55_TO_48__q47 } ;
  assign result__h31779 =
	     { {56{ld_val8268_BITS_63_TO_56__q49[7]}},
	       ld_val8268_BITS_63_TO_56__q49 } ;
  assign result__h31824 = { 56'd0, ld_val__h28268[7:0] } ;
  assign result__h31852 = { 56'd0, ld_val__h28268[15:8] } ;
  assign result__h31880 = { 56'd0, ld_val__h28268[23:16] } ;
  assign result__h31908 = { 56'd0, ld_val__h28268[31:24] } ;
  assign result__h31936 = { 56'd0, ld_val__h28268[39:32] } ;
  assign result__h31964 = { 56'd0, ld_val__h28268[47:40] } ;
  assign result__h31992 = { 56'd0, ld_val__h28268[55:48] } ;
  assign result__h32020 = { 56'd0, ld_val__h28268[63:56] } ;
  assign result__h32065 =
	     { {48{ld_val8268_BITS_15_TO_0__q37[15]}},
	       ld_val8268_BITS_15_TO_0__q37 } ;
  assign result__h32093 =
	     { {48{ld_val8268_BITS_31_TO_16__q41[15]}},
	       ld_val8268_BITS_31_TO_16__q41 } ;
  assign result__h32121 =
	     { {48{ld_val8268_BITS_47_TO_32__q42[15]}},
	       ld_val8268_BITS_47_TO_32__q42 } ;
  assign result__h32149 =
	     { {48{ld_val8268_BITS_63_TO_48__q48[15]}},
	       ld_val8268_BITS_63_TO_48__q48 } ;
  assign result__h32190 = { 48'd0, ld_val__h28268[15:0] } ;
  assign result__h32218 = { 48'd0, ld_val__h28268[31:16] } ;
  assign result__h32246 = { 48'd0, ld_val__h28268[47:32] } ;
  assign result__h32274 = { 48'd0, ld_val__h28268[63:48] } ;
  assign result__h32315 =
	     { {32{ld_val8268_BITS_31_TO_0__q38[31]}},
	       ld_val8268_BITS_31_TO_0__q38 } ;
  assign result__h32343 =
	     { {32{ld_val8268_BITS_63_TO_32__q45[31]}},
	       ld_val8268_BITS_63_TO_32__q45 } ;
  assign result__h32382 = { 32'd0, ld_val__h28268[31:0] } ;
  assign result__h32410 = { 32'd0, ld_val__h28268[63:32] } ;
  assign result__h7820 =
	     { {56{word64586_BITS_7_TO_0__q15[7]}},
	       word64586_BITS_7_TO_0__q15 } ;
  assign rg_amo_funct7_17_BITS_6_TO_2_18_EQ_0b10_19_AND_ETC___d658 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) &&
	     IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276 =
	     rg_lrsc_pa == x1_avValue_pa__h6111 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d418 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d468 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d132 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     tlb$lookup[68] ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d493 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__15_BIT_52_16_A_ETC___d482 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d491 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d497 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d633 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d652 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d491 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_T_ETC___d479 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d490 ;
  assign rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d681 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d678 ||
	     NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d680 ;
  assign rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d808 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d805 ||
	     NOT_rg_op_12_EQ_1_69_87_AND_NOT_rg_op_12_EQ_2__ETC___d807 ;
  assign rg_op_12_EQ_1_69_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d813 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_75_EQ_IF_rg_priv_5_ULE_0b1_6_AND_rg_ETC___d276) ;
  assign rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_12_EQ_0_13_14_AND_N_ETC___d126 &&
	     NOT_dmem_not_imem_27_OR_NOT_rg_op_12_EQ_0_13_1_ETC___d134 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[68]) ;
  assign rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d178 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[68] ;
  assign rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d386 =
	     rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	     (rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d149 ||
	      IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170) ;
  assign rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 =
	     rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d402 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] &&
	     !pte___2__h6557[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d426 =
	     rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	     tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d173 ||
	     dmem_not_imem && !soc_map$m_is_mem_addr ||
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d418 ||
	     NOT_rg_op_12_EQ_0_13_14_AND_NOT_rg_op_12_EQ_2__ETC___d423 ;
  assign rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d427 =
	     rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d426 ;
  assign rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d448 =
	     rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d442 &&
	     NOT_cfg_verbosity_read__9_ULT_2_37___d438 &&
	     dmem_not_imem &&
	     tlb$lookup[68] &&
	     tlb$lookup[73] &&
	     !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 ;
  assign rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d460 =
	     rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_5_EQ_0b0_02_63_OR_tlb_lookup_rg_sa_ETC___d442 &&
	     NOT_cfg_verbosity_read__9_ULT_2_37___d438 &&
	     dmem_not_imem &&
	     tlb$lookup[68] &&
	     tlb$lookup[73] ;
  assign rg_priv_5_ULE_0b1___d86 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q32 = rg_st_amo_val[31:0] ;
  assign rg_state_9_EQ_13_095_AND_rg_op_12_EQ_0_13_OR_r_ETC___d1097 =
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h22082 == 4'd0 ;
  assign rg_state_9_EQ_3_42_AND_NOT_rg_op_12_EQ_0_13_14_ETC___d346 =
	     rg_state == 5'd3 &&
	     (rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	      crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign satp_pa__h2098 = { 8'd0, x__h5299 } ;
  assign shift_bits__h3010 = { f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64__h3161 = 8'b00000001 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h3164 = 8'b00000011 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h3167 = 8'b00001111 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d132 =
	     tlb$lookup[67] | y__h6399 ;
  assign tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d173 =
	     tlb$lookup[130] &&
	     (rg_priv_5_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_ad_ETC___d149 ||
	      IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170) ;
  assign tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_addr_6_ETC___d379 =
	     tlb$lookup[72] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[73]) ;
  assign value__h7065 =
	     (rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_snd_fst__h6204 :
	       tlb$lookup[129:66] ;
  assign vpn_0_pa__h24110 = { 52'd0, rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h23077 = { 52'd0, rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h22180 = { 52'd0, rg_addr[38:30], 3'd0 } ;
  assign w10508_BITS_31_TO_0__q51 = w1__h30508[31:0] ;
  assign w1___1__h19264 = { 32'd0, new_value__h7767[31:0] } ;
  assign w1___1__h30583 = { 32'd0, w1__h30508[31:0] } ;
  assign w2___1__h30584 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h30514 = (rg_f3 == 3'b010) ? w2___1__h30584 : rg_st_amo_val ;
  assign word64586_BITS_15_TO_0__q16 = word64__h7586[15:0] ;
  assign word64586_BITS_15_TO_8__q18 = word64__h7586[15:8] ;
  assign word64586_BITS_23_TO_16__q19 = word64__h7586[23:16] ;
  assign word64586_BITS_31_TO_0__q17 = word64__h7586[31:0] ;
  assign word64586_BITS_31_TO_16__q20 = word64__h7586[31:16] ;
  assign word64586_BITS_31_TO_24__q21 = word64__h7586[31:24] ;
  assign word64586_BITS_39_TO_32__q22 = word64__h7586[39:32] ;
  assign word64586_BITS_47_TO_32__q23 = word64__h7586[47:32] ;
  assign word64586_BITS_47_TO_40__q25 = word64__h7586[47:40] ;
  assign word64586_BITS_55_TO_48__q26 = word64__h7586[55:48] ;
  assign word64586_BITS_63_TO_32__q24 = word64__h7586[63:32] ;
  assign word64586_BITS_63_TO_48__q27 = word64__h7586[63:48] ;
  assign word64586_BITS_63_TO_56__q28 = word64__h7586[63:56] ;
  assign word64586_BITS_7_TO_0__q15 = word64__h7586[7:0] ;
  assign word64__h7586 = ram_word64_set$DOB & y__h7856 ;
  assign x1_avValue_exc_code__h6112 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h6111 =
	     (rg_priv_5_ULE_0b1___d86 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_fst__h6202 :
	       rg_addr ;
  assign x__h15446 = { 63'd0, lrsc_result__h15436 } ;
  assign x__h23157 = { master_xactor_f_rd_data$D_OUT[56:13], 12'b0 } ;
  assign x__h30503 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h30524 :
	       _theResult_____2__h30520 ;
  assign x__h5299 = { rg_satp[43:0], 12'b0 } ;
  assign x__h6579 = { tlb$lookup[119:76], 12'd0 } ;
  assign x__h6614 = { tlb$lookup[119:85], rg_addr[20:12], 12'd0 } ;
  assign x__h6668 = { tlb$lookup[119:94], rg_addr[29:12], 12'd0 } ;
  assign x__h6762 = { tlb$lookup[119:76], rg_addr[11:0] } ;
  assign x__h6807 = { tlb$lookup[119:85], rg_addr[20:0] } ;
  assign x__h6873 = { tlb$lookup[119:94], rg_addr[29:0] } ;
  assign y__h6399 = rg_mstatus_MXR & tlb$lookup[69] ;
  assign y__h7856 =
	     {64{ram_state_and_ctag_cset$DOB[52] &&
		 ram_state_and_ctag_cset_b_read__15_BITS_51_TO__ETC___d220}} ;
  always@(f_fabric_write_reqs$D_OUT)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0: x__h3041 = 3'b0;
      2'b01: x__h3041 = 3'b001;
      2'b10: x__h3041 = 3'b010;
      2'b11: x__h3041 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h30060 = 3'b0;
      2'b01: value__h30060 = 3'b001;
      2'b10: value__h30060 = 3'b010;
      2'd3: value__h30060 = 3'b011;
    endcase
  end
  always@(tlb$lookup or
	  pabase___1__h6576 or pabase___1__h6611 or pabase___1__h6665)
  begin
    case (tlb$lookup[65:64])
      2'd0: pabase__h6553 = pabase___1__h6576;
      2'd1: pabase__h6553 = pabase___1__h6611;
      2'd2: pabase__h6553 = pabase___1__h6665;
      2'd3: pabase__h6553 = 64'd0;
    endcase
  end
  always@(tlb$lookup or
	  rg_addr or pa___1__h6575 or pa___1__h6610 or pa___1__h6664)
  begin
    case (tlb$lookup[65:64])
      2'd0: _theResult___fst__h6559 = pa___1__h6575;
      2'd1: _theResult___fst__h6559 = pa___1__h6610;
      2'd2: _theResult___fst__h6559 = pa___1__h6664;
      2'd3: _theResult___fst__h6559 = rg_addr;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or
	  strobe64__h3161 or strobe64__h3164 or strobe64__h3167)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0: mem_req_wr_data_wstrb__h3227 = strobe64__h3161;
      2'b01: mem_req_wr_data_wstrb__h3227 = strobe64__h3164;
      2'b10: mem_req_wr_data_wstrb__h3227 = strobe64__h3167;
      2'b11: mem_req_wr_data_wstrb__h3227 = 8'b11111111;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or _theResult___fst__h3162)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h3226 = _theResult___fst__h3162;
      2'd3: mem_req_wr_data_wdata__h3226 = f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d245 =
	      NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241;
      3'd7:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d245 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d253 =
	      NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d253 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d245 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d253 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_NOT_ETC___d259)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d245;
      3'b001, 3'b101:
	  IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_OR_rg_ad_ETC___d253;
      3'b010, 3'b110:
	  IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_NOT_ETC___d259;
      default: IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__15_BIT_52__ETC___d241;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29 =
	      IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_23_EQ_0b0_24_OR_rg_f3_23_EQ_0b100_25__ETC___d267;
    endcase
  end
  always@(x1_avValue_pa__h6111 or
	  NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d316 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d317 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29;
      3'd7:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d317 =
	      NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d316;
    endcase
  end
  always@(x1_avValue_pa__h6111 or
	  NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d321 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d322 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_23_ETC__q29;
      default: IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d322 =
		   NOT_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS__ETC___d321;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_23_EQ_0b11_60_61_OR_rg_amo_funct7_17_ETC___d326 or
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d317 or
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d322 or
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d325)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d329 =
	      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d317;
      3'b001:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d329 =
	      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d322;
      3'b010:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d329 =
	      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d325;
      default: IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d329 =
		   NOT_rg_f3_23_EQ_0b11_60_61_OR_rg_amo_funct7_17_ETC___d326;
    endcase
  end
  always@(rg_addr or
	  result__h7820 or
	  result__h14176 or
	  result__h14204 or
	  result__h14232 or
	  result__h14260 or
	  result__h14288 or result__h14316 or result__h14344)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h7820;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h14176;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h14204;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h14232;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h14260;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h14288;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h14316;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 =
	      result__h14344;
    endcase
  end
  always@(rg_addr or
	  result__h14389 or
	  result__h14417 or
	  result__h14445 or
	  result__h14473 or
	  result__h14501 or
	  result__h14529 or result__h14557 or result__h14585)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14389;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14417;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14445;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14473;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14501;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14529;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14557;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 =
	      result__h14585;
    endcase
  end
  always@(rg_addr or
	  result__h14630 or
	  result__h14658 or result__h14686 or result__h14714)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 =
	      result__h14630;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 =
	      result__h14658;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 =
	      result__h14686;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 =
	      result__h14714;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h14755 or
	  result__h14783 or result__h14811 or result__h14839)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 =
	      result__h14755;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 =
	      result__h14783;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 =
	      result__h14811;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 =
	      result__h14839;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14947 or result__h14975)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606 =
	      result__h14947;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606 =
	      result__h14975;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14880 or result__h14908)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4880_0x4_re_ETC__q30 =
	      result__h14880;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4880_0x4_re_ETC__q30 =
	      result__h14908;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result4880_0x4_re_ETC__q30 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4880_0x4_re_ETC__q30 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h7767 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560;
      3'b001:
	  new_value__h7767 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588;
      3'b010:
	  new_value__h7767 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result4880_0x4_re_ETC__q30;
      3'b011:
	  new_value__h7767 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607;
      3'b100:
	  new_value__h7767 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576;
      3'b101:
	  new_value__h7767 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596;
      3'b110:
	  new_value__h7767 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606;
      3'd7: new_value__h7767 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 or
	  w1___1__h19264 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606)
  begin
    case (rg_f3)
      3'b0:
	  w1__h19193 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560;
      3'b001:
	  w1__h19193 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588;
      3'b010: w1__h19193 = w1___1__h19264;
      3'b011:
	  w1__h19193 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607;
      3'b100:
	  w1__h19193 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576;
      3'b101:
	  w1__h19193 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596;
      3'b110:
	  w1__h19193 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606;
      3'd7: w1__h19193 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h6111 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h6111 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588 or
	  new_value767_BITS_31_TO_0__q31 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d560;
      3'b001:
	  IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d588;
      3'b010:
	  IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 =
	      { {32{new_value767_BITS_31_TO_0__q31[31]}},
		new_value767_BITS_31_TO_0__q31 };
      3'b011:
	  IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_ram_ETC___d607;
      3'b100:
	  IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d576;
      3'b101:
	  IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d596;
      3'b110:
	  IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d606;
      3'd7: IF_rg_f3_23_EQ_0b10_54_THEN_SEXT_IF_rg_f3_23_E_ETC___d676 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h20304 or
	  new_st_val__h19296 or
	  w2__h30514 or
	  new_st_val__h20276 or
	  new_st_val__h20284 or
	  new_st_val__h20280 or
	  new_st_val__h20299 or new_st_val__h20288 or new_st_val__h20293)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h19201 = new_st_val__h19296;
      5'b00001: _theResult_____2__h19201 = w2__h30514;
      5'b00100: _theResult_____2__h19201 = new_st_val__h20276;
      5'b01000: _theResult_____2__h19201 = new_st_val__h20284;
      5'b01100: _theResult_____2__h19201 = new_st_val__h20280;
      5'b10000: _theResult_____2__h19201 = new_st_val__h20299;
      5'b11000: _theResult_____2__h19201 = new_st_val__h20288;
      5'b11100: _theResult_____2__h19201 = new_st_val__h20293;
      default: _theResult_____2__h19201 = new_st_val__h20304;
    endcase
  end
  always@(x1_avValue_pa__h6111 or ram_word64_set$DOB or new_st_val__h18923)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792 =
	      { ram_word64_set$DOB[63:16], new_st_val__h18923[15:0] };
      3'h2:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18923[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18923[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792 =
	      { new_st_val__h18923[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h6111 or ram_word64_set$DOB or new_st_val__h18923)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { ram_word64_set$DOB[63:8], new_st_val__h18923[7:0] };
      3'h1:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h18923[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h18923[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18923[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h18923[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18923[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h18923[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 =
	      { new_st_val__h18923[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h6111 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0:
	  CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718 or
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727 or
	  CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q33 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736 =
	      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d718;
      3'b001:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736 =
	      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d727;
      3'b010:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736 =
	      CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q33;
      3'b011:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736 =
	      rg_st_amo_val;
      default: IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h28797 or
	  result__h28824 or result__h28851 or result__h28878)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167 =
	      result__h28797;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167 =
	      result__h28824;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167 =
	      result__h28851;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167 =
	      result__h28878;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28918 or
	  result__h28945 or result__h28972 or result__h28999)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175 =
	      result__h28918;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175 =
	      result__h28945;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175 =
	      result__h28972;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175 =
	      result__h28999;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28564 or
	  result__h28591 or
	  result__h28618 or
	  result__h28645 or
	  result__h28672 or
	  result__h28699 or result__h28726 or result__h28753)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28564;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28591;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28618;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28645;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28672;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28699;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28726;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 =
	      result__h28753;
    endcase
  end
  always@(rg_addr or
	  result__h28328 or
	  result__h28358 or
	  result__h28385 or
	  result__h28412 or
	  result__h28439 or
	  result__h28466 or result__h28493 or result__h28520)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28328;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28358;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28385;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28412;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28439;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28466;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28493;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 =
	      result__h28520;
    endcase
  end
  always@(rg_addr or result__h29039 or result__h29066)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result9039_0x4_re_ETC__q34 =
	      result__h29039;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result9039_0x4_re_ETC__q34 =
	      result__h29066;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result9039_0x4_re_ETC__q34 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h29104 or result__h29131)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result9104_0x4_re_ETC__q35 =
	      result__h29104;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result9104_0x4_re_ETC__q35 =
	      result__h29131;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result9104_0x4_re_ETC__q35 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result9039_0x4_re_ETC__q34 or
	  rg_addr or
	  master_xactor_f_rd_data$D_OUT or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result9104_0x4_re_ETC__q35)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h28268 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1139;
      3'b001:
	  ld_val__h28268 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1167;
      3'b010:
	  ld_val__h28268 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result9039_0x4_re_ETC__q34;
      3'b011:
	  ld_val__h28268 =
	      (rg_addr[2:0] == 3'h0) ?
		master_xactor_f_rd_data$D_OUT[66:3] :
		64'd0;
      3'b100:
	  ld_val__h28268 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1155;
      3'b101:
	  ld_val__h28268 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1175;
      3'b110:
	  ld_val__h28268 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result9104_0x4_re_ETC__q35;
      3'd7: ld_val__h28268 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h32382 or result__h32410)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294 =
	      result__h32382;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294 =
	      result__h32410;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h32190 or
	  result__h32218 or result__h32246 or result__h32274)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 =
	      result__h32190;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 =
	      result__h32218;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 =
	      result__h32246;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 =
	      result__h32274;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h32065 or
	  result__h32093 or result__h32121 or result__h32149)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 =
	      result__h32065;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 =
	      result__h32093;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 =
	      result__h32121;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 =
	      result__h32149;
      default: IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h31824 or
	  result__h31852 or
	  result__h31880 or
	  result__h31908 or
	  result__h31936 or
	  result__h31964 or result__h31992 or result__h32020)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h31824;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h31852;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h31880;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h31908;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h31936;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h31964;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h31992;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 =
	      result__h32020;
    endcase
  end
  always@(rg_addr or
	  result__h30703 or
	  result__h31611 or
	  result__h31639 or
	  result__h31667 or
	  result__h31695 or
	  result__h31723 or result__h31751 or result__h31779)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h30703;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h31611;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h31639;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h31667;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h31695;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h31723;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h31751;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 =
	      result__h31779;
    endcase
  end
  always@(rg_addr or result__h32315 or result__h32343)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2315_0x4_re_ETC__q50 =
	      result__h32315;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2315_0x4_re_ETC__q50 =
	      result__h32343;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2315_0x4_re_ETC__q50 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2315_0x4_re_ETC__q50 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294)
  begin
    case (rg_f3)
      3'b0:
	  w1__h30508 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248;
      3'b001:
	  w1__h30508 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276;
      3'b010:
	  w1__h30508 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2315_0x4_re_ETC__q50;
      3'b011:
	  w1__h30508 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295;
      3'b100:
	  w1__h30508 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264;
      3'b101:
	  w1__h30508 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284;
      3'b110:
	  w1__h30508 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294;
      3'd7: w1__h30508 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 or
	  w1___1__h30583 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294)
  begin
    case (rg_f3)
      3'b0:
	  w1__h30512 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248;
      3'b001:
	  w1__h30512 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276;
      3'b010: w1__h30512 = w1___1__h30583;
      3'b011:
	  w1__h30512 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295;
      3'b100:
	  w1__h30512 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264;
      3'b101:
	  w1__h30512 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284;
      3'b110:
	  w1__h30512 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294;
      3'd7: w1__h30512 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276 or
	  w10508_BITS_31_TO_0__q51 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284 or
	  IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h30474 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1248;
      3'b001:
	  new_ld_val__h30474 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_SEX_ETC___d1276;
      3'b010:
	  new_ld_val__h30474 =
	      { {32{w10508_BITS_31_TO_0__q51[31]}},
		w10508_BITS_31_TO_0__q51 };
      3'b011:
	  new_ld_val__h30474 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_IF__ETC___d1295;
      3'b100:
	  new_ld_val__h30474 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1264;
      3'b101:
	  new_ld_val__h30474 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1284;
      3'b110:
	  new_ld_val__h30474 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_0_C_ETC___d1294;
      3'd7: new_ld_val__h30474 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h32503 or
	  new_st_val__h30615 or
	  w2__h30514 or
	  new_st_val__h32475 or
	  new_st_val__h32483 or
	  new_st_val__h32479 or
	  new_st_val__h32498 or new_st_val__h32487 or new_st_val__h32492)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h30520 = new_st_val__h30615;
      5'b00001: _theResult_____2__h30520 = w2__h30514;
      5'b00100: _theResult_____2__h30520 = new_st_val__h32475;
      5'b01000: _theResult_____2__h30520 = new_st_val__h32483;
      5'b01100: _theResult_____2__h30520 = new_st_val__h32479;
      5'b10000: _theResult_____2__h30520 = new_st_val__h32498;
      5'b11000: _theResult_____2__h30520 = new_st_val__h32487;
      5'b11100: _theResult_____2__h30520 = new_st_val__h32492;
      default: _theResult_____2__h30520 = new_st_val__h32503;
    endcase
  end
  always@(x1_avValue_pa__h6111 or ram_word64_set$DOB or new_st_val__h18923)
  begin
    case (x1_avValue_pa__h6111[2:0])
      3'h0:
	  CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q52 =
	      { ram_word64_set$DOB[63:32], new_st_val__h18923[31:0] };
      3'h4:
	  CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q52 =
	      { new_st_val__h18923[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q52 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783 or
	  IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792 or
	  CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q52 or
	  new_st_val__h18923)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801 =
	      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d783;
      3'b001:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801 =
	      IF_IF_rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_6_ETC___d792;
      3'b010:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801 =
	      CASE_x1_avValue_pa111_BITS_2_TO_0_0x0_ram_word_ETC__q52;
      3'b011:
	  IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801 =
	      new_st_val__h18923;
      default: IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_1_E_ETC___d621)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h17794 =
	      IF_rg_addr_6_BITS_2_TO_0_27_EQ_0x0_28_THEN_1_E_ETC___d621;
      3'd7: new_value__h17794 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (crg_sb_to_load_delay$EN)
	  crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      crg_sb_to_load_delay$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mrbm$EN) rg_mrbm <= `BSV_ASSIGNMENT_DELAY rg_mrbm$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_parbase$EN) rg_parbase <= `BSV_ASSIGNMENT_DELAY rg_parbase$D_IN;
    if (rg_parmask$EN) rg_parmask <= `BSV_ASSIGNMENT_DELAY rg_parmask$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    crg_sb_to_load_delay = 11'h2AA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 6'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mrbm = 64'hAAAAAAAAAAAAAAAA;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_parbase = 64'hAAAAAAAAAAAAAAAA;
    rg_parmask = 64'hAAAAAAAAAAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h3471 = $stime;
	  #0;
	end
    v__h3465 = v__h3471 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h3465);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", f_fabric_write_reqs$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", x__h3041);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", mem_req_wr_data_wdata__h3226);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", mem_req_wr_data_wstrb__h3227);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4625 = $stime;
	  #0;
	end
    v__h4619 = v__h4625 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4619,
		   "D_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4619,
		   "I_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4726 = $stime;
	  #0;
	end
    v__h4720 = v__h4726 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4720, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4720, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h5179 = $stime;
	  #0;
	end
    v__h5173 = v__h5179 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h5173,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h5173,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[63:60],
		 rg_satp[59:44],
		 satp_pa__h2098,
		 rg_addr[29:21],
		 rg_addr[20:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:12],
		 rg_addr[11:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0_1_AND_NOT_rg_ETC___d385)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d386 &&
	  tlb$lookup[130])
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_priv_5_ULE_0b1___d86 &&
	  rg_satp[63:60] == 4'd8 &&
	  !tlb$lookup[130])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", x1_avValue_pa__h6111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", x1_avValue_exc_code__h6112);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d399)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", value__h7065, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("TLB_Lookup_Result { ", "hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("'h%h", tlb$lookup[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("'h%h", tlb$lookup[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("'h%h", tlb$lookup[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d448)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438 &&
	  (!dmem_not_imem || !tlb$lookup[68] || !tlb$lookup[73] ||
	   IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170))
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("'h%h", x1_avValue_pa__h6111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("'h%h", x1_avValue_exc_code__h6112);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438 &&
	  (!dmem_not_imem || !tlb$lookup[68] || !tlb$lookup[73]))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d460)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("'h%h", value__h7065, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !IF_tlb_lookup_rg_satp_8_BITS_59_TO_44_5_rg_add_ETC___d170 &&
	  rg_priv_5_ULE_0b1_6_AND_rg_satp_8_BITS_63_TO_6_ETC___d409 &&
	  NOT_cfg_verbosity_read__9_ULT_2_37___d438)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d474)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d636)
	begin
	  v__h15059 = $stime;
	  #0;
	end
    v__h15053 = v__h15059 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d636)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h15053,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h7586,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h15053,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h7586,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d649)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h6111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d636)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h7586);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d655)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d661)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d824)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h6111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d830)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h6111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d836)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d842)
	$display("        AMO SC result = %0d", lrsc_result__h15436);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d848)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h6111,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d848)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d848)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d848)
	$write(" 0x%0x",
	       IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d736);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d848)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_5_ULE_0b1___d86 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d853)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h6111,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d860)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d860)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d866)
	begin
	  v__h18703 = $stime;
	  #0;
	end
    v__h18697 = v__h18703 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d866)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18697,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18697,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d866)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d873)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$display("          PA 0x%0h ", x1_avValue_pa__h6111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h7586,
		 word64__h7586);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h7586,
		 word64__h7586,
		 new_st_val__h18923);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$write(" 0x%0x",
	       IF_rg_f3_23_EQ_0b0_24_THEN_IF_IF_rg_priv_5_ULE_ETC___d801);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d878)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_5_ULE_0b1_6_7_OR_NOT_rg_satp_8_BIT_ETC___d884)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h6111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h22128 = $stime;
	  #0;
	end
    v__h22122 = v__h22128 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		   v__h22122,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		   v__h22122,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", lev_2_pte_pa_w64_fa__h22183);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944)
	begin
	  v__h23046 = $stime;
	  #0;
	end
    v__h23040 = v__h23046 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23040,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23040,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	begin
	  v__h22803 = $stime;
	  #0;
	end
    v__h22797 = v__h22803 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h22797,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h22797,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$display("    Req for level 1 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", lev_1_pte_pa_w64_fa__h23080);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d970)
	begin
	  v__h23334 = $stime;
	  #0;
	end
    v__h23328 = v__h23334 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d970)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h23328,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h23328,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  master_xactor_f_rd_data$D_OUT[3] &&
	  (master_xactor_f_rd_data$D_OUT[4] ||
	   !master_xactor_f_rd_data$D_OUT[5]) &&
	  (master_xactor_f_rd_data$D_OUT[6] ||
	   master_xactor_f_rd_data$D_OUT[4]) &&
	  (master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
	   master_xactor_f_rd_data$D_OUT[21:13] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 exc_code___1__h6473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d982)
	begin
	  v__h23446 = $stime;
	  #0;
	end
    v__h23440 = v__h23446 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d982)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h23440,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h23440,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d982)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h23076);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h22975 = $stime;
	  #0;
	end
    v__h22969 = v__h22975 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22969,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2779);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22969,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2779);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944)
	begin
	  v__h24079 = $stime;
	  #0;
	end
    v__h24073 = v__h24079 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24073,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24073,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	begin
	  v__h23839 = $stime;
	  #0;
	end
    v__h23833 = v__h23839 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23833,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23833,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", lev_0_pte_pa_w64_fa__h24113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1017)
	begin
	  v__h24479 = $stime;
	  #0;
	end
    v__h24473 = v__h24479 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1017)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h24473,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h24473,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1017)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h23076);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1023)
	begin
	  v__h24367 = $stime;
	  #0;
	end
    v__h24361 = v__h24367 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1023)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h24361,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h24361,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  master_xactor_f_rd_data$D_OUT[3] &&
	  (master_xactor_f_rd_data$D_OUT[4] ||
	   !master_xactor_f_rd_data$D_OUT[5]) &&
	  (master_xactor_f_rd_data$D_OUT[6] ||
	   master_xactor_f_rd_data$D_OUT[4]) &&
	  master_xactor_f_rd_data$D_OUT[21:13] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h6473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h24008 = $stime;
	  #0;
	end
    v__h24002 = v__h24008 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24002,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2779);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24002,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2779);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944)
	begin
	  v__h24950 = $stime;
	  #0;
	end
    v__h24944 = v__h24950 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d944)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24944,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24944,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	begin
	  v__h25021 = $stime;
	  #0;
	end
    v__h25015 = v__h25021 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d954)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h25015,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h25015,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1048)
	begin
	  v__h25103 = $stime;
	  #0;
	end
    v__h25097 = v__h25103 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1048)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h25097,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h25097,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__04_BITS_2_TO_1__ETC___d1048)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h23076);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h24879 = $stime;
	  #0;
	end
    v__h24873 = v__h24879 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24873,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2779);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24873,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2779);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h25230 = $stime;
	  #0;
	end
    v__h25224 = v__h25230 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h25224,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h25224,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", cline_fabric_addr__h25283);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	begin
	  v__h25988 = $stime;
	  #0;
	end
    v__h25982 = v__h25988 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25982,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25982,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h26210 = $stime;
	  #0;
	end
    v__h26204 = v__h26210 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h26204,
		   "D_MMU_Cache",
		   access_exc_code__h2779);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h26204,
		   "I_MMU_Cache",
		   access_exc_code__h2779);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write(" 0x%0x", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_067___d1068)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:6],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h27809 = $stime;
	  #0;
	end
    v__h27803 = v__h27809 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27803,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27803,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", value__h30060);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h28159 = $stime;
	  #0;
	end
    v__h28153 = v__h28159 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28153,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28153,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29259 = $stime;
	  #0;
	end
    v__h29253 = v__h29259 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29253,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h28268);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29253,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h28268);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29366 = $stime;
	  #0;
	end
    v__h29360 = v__h29366 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h29360,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h29360,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29471 = $stime;
	  #0;
	end
    v__h29465 = v__h29471 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29465,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29465,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29551 = $stime;
	  #0;
	end
    v__h29545 = v__h29551 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29545,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29545,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29761 = $stime;
	  #0;
	end
    v__h29755 = v__h29761 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29755,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29755,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29879 = $stime;
	  #0;
	end
    v__h29873 = v__h29879 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29873,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29873,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", value__h30060);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h30173 = $stime;
	  #0;
	end
    v__h30167 = v__h30173 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h30167,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h30167,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h30348 = $stime;
	  #0;
	end
    v__h30342 = v__h30348 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30342,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30342,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h32607 = $stime;
	  #0;
	end
    v__h32601 = v__h32607 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h32601,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h30474);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h32601,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h30474);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h30444 = $stime;
	  #0;
	end
    v__h30438 = v__h30444 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h30438,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h30438,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h33214 = $stime;
	  #0;
	end
    v__h33208 = v__h33214 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h33208,
		 "D_MMU_Cache",
		 $unsigned(b__h22082));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h33208,
		 "I_MMU_Cache",
		 $unsigned(b__h22082));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	begin
	  v__h33175 = $stime;
	  #0;
	end
    v__h33169 = v__h33175 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h33169,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h33169,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h4256 = $stime;
	  #0;
	end
    v__h4250 = v__h4256 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h4250, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h4250, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h33569 = $stime;
	  #0;
	end
    v__h33563 = v__h33569 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h33563, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h33563, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_380_EQ_0b0_381_OR_req_f3_BI_ETC___d1410 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h34789 = $stime;
	  #0;
	end
    v__h34783 = v__h34789 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h34783, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h34783, "I_MMU_Cache");
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

